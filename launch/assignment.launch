<launch>
	
<!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="extra_gazebo_args" default=""/>
  <arg name="gui" default="true"/>
  <arg name="gazebo_gui" default="true"/>
  <arg name="recording" default="false"/>
  <arg name="world" default="assignment_world" />
  <arg name="urdf_path" default="$(find assignment2)/urdf/robot_assignment.urdf"/>
  <arg name="node_start_delay" default="20.0" /> 


  <!-- Note that 'headless' is currently non-functional.  See gazebo_ros_pkgs issue #491 (-r arg does not disable
       rendering, but instead enables recording). The arg definition has been left here to prevent breaking downstream
       launch files, but it does nothing. -->
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="physics" default="ode"/>
  <arg name="verbose" default="false"/>
  <arg name="world_name" value="$(find assignment2)/worlds/$(arg world).world"/>
  <arg name="respawn_gazebo" default="false"/>
  <arg name="use_clock_frequency" default="false"/>
  <arg name="pub_clock_frequency" default="100"/>

  <!-- set use_sim_time flag -->
  <param name="/use_sim_time" value="$(arg use_sim_time)"/>

  <!-- set command arguments -->
  <arg unless="$(arg paused)" name="command_arg1" value=""/>
  <arg     if="$(arg paused)" name="command_arg1" value="-u"/>
  <arg unless="$(arg recording)" name="command_arg2" value=""/>
  <arg     if="$(arg recording)" name="command_arg2" value="-r"/>
  <arg unless="$(arg verbose)" name="command_arg3" value=""/>
  <arg     if="$(arg verbose)" name="command_arg3" value="--verbose"/>
  <arg unless="$(arg debug)" name="script_type" value="gzserver"/>
  <arg     if="$(arg debug)" name="script_type" value="debug"/>

  <node pkg="armor" type="execute" name="armor_service" args="it.emarolab.armor.ARMORMainService" /> 
  <node pkg = "assignment2" type = "robot_states.py" name = "robot_states"/> 
  <node pkg = "assignment2" type = "marker_server" name = "marker_server" />
  <node pkg = "aruco_ros" type = "marker_publisher" name = "marker_publisher" args = "/image:=/robot_camera/image_box" />
  <node name = "image_view" pkg = "image_view" type = "image_view" args = "image:=/marker_publisher/result" />
  <node pkg = "smach_viewer" type = "smach_viewer.py" name = "smach_viewer" />
  <node name="my_moveit" pkg="assignment2" type="my_moveit"/> 
  <node pkg = "assignment2"  type = "finite_state_machine.py" name = "finite_state_machine" launch-prefix="bash -c 'sleep $(arg node_start_delay); $0 $@'" output = "screen" /> 
  
  <!-- Launch moveit package along with gazebo and Rviz -->
  <include file="$(find assignment_moveit_pkg)/launch/demo_gazebo.launch" >
    <arg name="use_gui" value="$(arg gui)"/>
    <arg name="gazebo_gui" value="$(arg gazebo_gui)"/>
    <arg name="paused" value="$(arg paused)"/>
    <arg name="urdf_path" value="$(arg urdf_path)"/>
  </include>

  <!-- Launch gmapping packages -->
  <include file="$(find assignment2)/launch/simulation_gmapping.launch" />
  
  <!-- run movebase node and their params -->
  <node pkg="move_base" type="move_base" respawn="false" name="move_base">
    <rosparam file="$(find assignment2)/param/costmap_common_params.yaml" command="load" ns="global_costmap"/>
    <rosparam file="$(find assignment2)/param/costmap_common_params.yaml" command="load" ns="local_costmap"/>
    <rosparam file="$(find assignment2)/param/local_costmap_params.yaml" command="load"/>
    <rosparam file="$(find assignment2)/param/global_costmap_params.yaml" command="load"/>
    <rosparam file="$(find assignment2)/param/base_local_planner_params.yaml" command="load"/>
    <rosparam file="$(find assignment2)/param/move_base_params.yaml" command="load"/>
  </node>
</launch>
